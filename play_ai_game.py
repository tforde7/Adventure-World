"""
The AIGame class manages the execution of an AI-based game session, coordinating interactions between a player 
and AI-generated content. It utilizes multiple generators from the Generator Factory module to create 
and present text, images, and audio based on the gameplay.

Attributes:
    - main_menu: Instance of the MainMenu class, enabling interaction with the main menu.
    - player: The player object participating in the AI game.
    - image_generator: Instance of the image generator obtained from GeneratorFactory.
    - audio_generator: Instance of the audio generator obtained from GeneratorFactory.
    - text_generator: Instance of the text generator obtained from GeneratorFactory.

Methods:
    - __init__: 
    Initializes the AIGame object with a reference to the MainMenu instance and the player. 
    Sets up generators for image, audio, and text.
    - play_game: 
    Initiates the AI game by generating content and managing its presentation through threads. 
    It generates text, images, and audio generated by OpenAI models, presents them to the user, and handles user input.
    
The play_game method follows these steps:
    - Checks for AI database connectivity.
    - Initiates the game loop:
        - Generates text based on AI algorithms.
        - Generates an image and saves it.
        - Generates audio and saves it.
        - Starts threads for displaying the image and playing the audio concurrently.
        - Waits for the threads to finish.
        - Displays generated text.
        - Collects user input.
        - Updates the text generator with user input.
        - Breaks the loop when the AI-generated text signals the end of the game.
"""

import threading
from AI.generator_factory import GeneratorFactory
from AI.database.database import is_connected

class AIGame:
    
    def __init__(self, main_menu, player):
        self.main_menu = main_menu
        self.player = player
        self.image_generator = GeneratorFactory.get_image_generator()
        self.audio_generator = GeneratorFactory.get_audio_generator()
        self.text_generator = GeneratorFactory.get_text_genrator()
        
        self.text_generator.set_player(self.player)
    
    def play_game(self):
        if not is_connected:
            print("AI game not available right now.\nPlease try again later.")
            self.main_menu.show_menu()
        else:
            print("\nStarting AI game..\n")
            while True:
                text = self.text_generator.generate()

                generated_image_response = self.image_generator.generate_image(text)
                image = self.image_generator.convert_response_to_image(generated_image_response)
                self.image_generator.save_image(image)

                generated_audio_response = self.audio_generator.generate_audio(text)
                self.audio_generator.save_audio(generated_audio_response)

                image_thread = threading.Thread(target=self.image_generator.display_image, args=(image,))
                audio_thread = threading.Thread(target=self.audio_generator.play_audio)

                image_thread.start()
                audio_thread.start()

                image_thread.join()
                audio_thread.join()

                print(text)
                print("\n")

                if "The end." in text:
                    break

                human_input = input("Your reply: ")
                self.text_generator.set_human_input(human_input)
            
